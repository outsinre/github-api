#!/usr/bin/env bash

function warn () {
    >&2 printf '%s\n' "$@"
}

function die () {
    local st
    st=$?
    case $2 in
        (*[^0-9]*|'') : ;;
        (*) st=$2 ;;
    esac
    warn "$1"
    exit "$st"
}

function clean_up () {
    local st
    st=$?
    warn "WARNING: $0 is terminated". "output dir $out_dir removed"
    rm -rf "$out_dir"
    exit $st
}

function show_help () {
    local prg
    prg=$(basename "$0")
    cat <<-EOF
Version: 0.1
 Author: Zachary Hu (zhucac AT outlook.com)
 Script: Compare between two revisions (e.g. release tags) and output commits, pull requests and pull requests without changelog.
  Usage: ${prg} --org-repo kong/kong-ee --base-commit 3.4.3.2 --head-commit 3.4.3.3 [-v]

         ORG_REPO=kong/kong-ee BASE_COMMIT=3.4.3.2 HEAD_COMMIT=3.4.3.3 $prg
EOF
}

function set_globals () {
    ORG_REPO="${ORG_REPO:-kong/kong-ee}"
    BASE_COMMIT="${BASE_COMMIT:-3.4.3.2}"
    HEAD_COMMIT="${HEAD_COMMIT:-3.4.3.3}"

    verbose=0
    out_dir=$(mktemp -dt output)
    commits_file="${out_dir}/commits.txt"
    prs_file="${out_dir}/prs.txt"
    prs_no_changelog_file="${out_dir}/no_changelog_prs.txt"
    prs_no_cherrypick_file="${out_dir}/no_cherrypick_prs.txt"

    per_page=100
    num_of_pages=1
    bulk=15
}

function parse_args () {
    while : ; do
        case "$1" in
            (-h|--help)
                show_help
                exit
                ;;
            (-v|--verbose)
                set -x
                verbose=$((verbose + 1))
                ;;
            (--base-commit)
                if [[ -n "$2" ]] ; then
                    BASE_COMMIT="$2"
                else
                    die 'ERROR: "--base-commit" requires a non-empty option argument.' 2
                fi
                shift
                ;;
            (--base-commit=*)
                BASE_COMMIT="${1#--base-commit=}"
                if [[ -z "$BASE_COMMIT" ]] ; then
                    die 'ERROR: "--base-commit=" requires a non-empty option argument followed immediately.' 2
                fi
                ;;
            (--head-commit)
                if [[ -n "$2" ]] ; then
                    HEAD_COMMIT="$2"
                else
                    die 'ERROR: "--head-commit" requires a non-empty option argument.' 2
                fi
                shift
                ;;
            (--head-commit=*)
                HEAD_COMMIT="${1#--base-commit=}"
                if [[ -z "$HEAD_COMMIT" ]] ; then
                    die 'ERROR: "--head-commit=" requires a non-empty option argument followed immediately.' 2
                fi
                ;;
            (--org-repo)
                if [[ -n "$2" ]] ; then
                    ORG_REPO="$2"
                else
                    die 'ERROR: "--org-repo" requires a non-empty option argument.' 2
                fi
                shift
                ;;
            (--org-repo=*)
                ORG_REPO="${1#--org-repo=}"
                if [[ -z "$ORG_REPO" ]] ; then
                    die 'ERROR: "--org-repo=" requires a non-empty option argument followed immediately.' 2
                fi
                ;;
            (--)
                shift
                break
                ;;
            (-?*)
                warn "WARNING: unknown option (ignored): $1"
                ;;
            (*)
                break
                ;;
        esac

        shift
    done
}

function prepare_args () {
    parse_args "$@"

    if [[ -z "${ORG_REPO:+x}" ]] ; then
        warn "WARNING: ORG_REPO must be provided"
    fi
    if [[ -z "${BASE_COMMIT:+x}" ]] ; then
        warn "WARNING: BASE_COMMIT must be provided"
    fi
    if [[ -z "${HEAD_COMMIT:+x}" ]] ; then
        warn "WARNING: HEAD_COMMIT must be provided"
    fi
    if [[ -z "${GITHUB_TOKEN:+x}" ]] ; then
        warn "WARNING: GITHUB_TOKEN must be provided"
    fi

    printf '%s\n' \
           "Org Repo: ${ORG_REPO}" \
           "Base Commit: ${BASE_COMMIT}" \
           "Head Commit: ${HEAD_COMMIT}"
}

function get_num_pages_commits () {
    local paged_response
    paged_response=$( curl -i -sSL \
                           -H "Accept: application/vnd.github+json" \
                           -H "X-GitHub-Api-Version: 2022-11-28" \
                           -H "Authorization: Bearer ${GITHUB_TOKEN}" \
                           "https://api.github.com/repos/${ORG_REPO}/compare/${BASE_COMMIT}...${HEAD_COMMIT}?per_page=${per_page}" )

    local link_header
    link_header=$( awk '/^link:/ { print; exit }' <<< "$paged_response" )
    IFS="," read -ra links <<< "$link_header"

    local regex='[^_](page=([0-9]+)).*rel="last"'
    for link in "${links[@]}" ; do
        if [[ "$link" =~ $regex ]] ; then
            num_of_pages="${BASH_REMATCH[2]}"
            break
        fi
    done

    local total_commits
    total_commits=$( awk 'BEGIN { FS="[[:space:]]+|," } /total_commits/ { print $3; exit }' <<< "$paged_response" )
    printf 'number of commits: %s\n' "$total_commits"

}

function get_commits_prs () {
    get_num_pages_commits
    printf 'number of pages: %s\n' "$num_of_pages"
    printf 'commits per page: %s\n' "$per_page"

    printf '%s\n' "" "PRs:"
    for i in $( seq 1 "${num_of_pages}" ) ; do
        mapfile -t < <( curl -sSL \
                             -H "Accept: application/vnd.github+json" \
                             -H "X-GitHub-Api-Version: 2022-11-28" \
                             -H "Authorization: Bearer ${GITHUB_TOKEN}" \
                             "https://api.github.com/repos/${ORG_REPO}/compare/${BASE_COMMIT}...${HEAD_COMMIT}?page=${i}&per_page=${per_page}" | \
                            jq -r '.commits[].sha' )

        local max_per_request=17
        local BASE_Q="repo:${ORG_REPO}%20type:pr%20is:merged"
        local full_q="$BASE_Q"
        local count=0
        for commit in "${MAPFILE[@]}" ; do
            printf '%s\n' "${commit:0:9}" >> "$commits_file"

            full_q="${full_q}%20${commit:0:9}"
            count=$((count+1))

            if ! (( count % max_per_request )) || test "$count" -eq "$per_page" ; then
                curl -sSL \
                     -H "Accept: application/vnd.github+json" \
                     -H "X-GitHub-Api-Version: 2022-11-28" \
                     -H "Authorization: Bearer ${GITHUB_TOKEN}" \
                     "https://api.github.com/search/issues?q=$full_q" | jq -r '.items[].html_url' | tee -a "$prs_file"

                full_q="$BASE_Q"
            fi
        done
    done

    sort -uo "$prs_file" "$prs_file"
}

function check_pr_changelog () {
    if [[ -z "${1:+x}" ]] ; then return ; fi

    local changelog_pattern="changelog/unreleased/kong*/*.yml"
    local req_url="https://api.github.com/repos/${ORG_REPO}/pulls/PR_NUMBER/files"
    local pr_number="${1##https*/}"
    req_url="${req_url/PR_NUMBER/$pr_number}"
    mapfile -t < <( curl -sSL \
                         -H "Accept: application/vnd.github+json" \
                         -H "Authorization: Bearer ${GITHUB_TOKEN}" \
                         -H "X-GitHub-Api-Version: 2022-11-28" \
                         "$req_url" | jq -r '.[].filename' )

    local has_changelog=0
    for f in "${MAPFILE[@]}" ; do
        if [[ "$f" == ${changelog_pattern} ]] ; then has_changelog=1; break; fi
    done
    if ! (( "$has_changelog" )) ; then echo "$1" | tee -a "$prs_no_changelog_file" ; fi
}

function check_changelog () {
    local in_fd
    if [[ -f "$1" ]] ; then
        : {in_fd}<"$1"
    else
        : {in_fd}<&0
        warn "WARNING: $1 not a valid file. Read from stdin -"
    fi

    echo -e "\nPRs without changelog:"
    export ORG_REPO="$ORG_REPO" prs_no_changelog_file="$prs_no_changelog_file"
    export -f check_pr_changelog
    if type parallel >/dev/null 2>&1 ; then
        parallel check_pr_changelog '{}' <"$1"
    else
        warn "WARNING: GNU parallel is not available, fallback to xargs"
        <"$1" xargs -P "$bulk" -n1 -I'{}' bash -c 'check_pr_changelog "$@"' _ '{}'
    fi
    sort -uo "$prs_no_changelog_file" "$prs_no_changelog_file"

    : ${in_fd}<&-
}

function check_pr_ce2ee () {
    if [[ -z "${1:+x}" ]] ; then return ; fi

    local label_pattern="cherry-pick kong-ee"
    local req_url="https://api.github.com/repos/kong/kong/issues/PR_NUMBER/labels"
    local pr_number="${1##https://*/}"
    req_url="${req_url/PR_NUMBER/$pr_number}"
    mapfile -t < <( curl -sSL \
                         -H "Accept: application/vnd.github+json" \
                         -H "Authorization: Bearer ${GITHUB_TOKEN}" \
                         -H "X-GitHub-Api-Version: 2022-11-28" \
                         "$req_url" | jq -r '.[].name' )

    local has_cherrypick=0
    for l in "${MAPFILE[@]}" ; do
        if [[ "$l" == ${label_pattern} ]] ; then has_cherrypick=1; break; fi
    done
    if ! (( "$has_cherrypick" )) ; then echo "$1" | tee -a "$prs_no_cherrypick_file" ; fi
}

function check_ce2ee () {
    local in_fd
    if [[ -f "$1" ]] ; then
        : {in_fd}<"$1"
    else
        : {in_fd}<&0
        warn "WARNING: $1 not a valid file. Read from stdin -"
    fi

    echo -e "\nPRs without cherry-pick label:"
    if [[ "$ORG_REPO" != "kong/kong" && "$ORG_REPO" != "Kong/kong" ]] ; then
        warn "WARNING: skip cherry-pick on repo $ORG_REPO"
        touch "$prs_no_cherrypick_file"
        return
    fi

    export ORG_REPO="$ORG_REPO" prs_no_cherrypick_file="$prs_no_cherrypick_file"
    export -f check_pr_ce2ee
    if type parallel >/dev/null 2>&1 ; then
        parallel check_pr_ce2ee '{}' <"$1"
    else
        warn "WARNING: GNU parallel is not available, fallback to xargs"
        <"$1" xargs -P "$bulk" -n1 -I'{}' bash -c 'check_pr_ce2ee "$@"' _ '{}'
    fi
    sort -uo "$prs_no_cherrypick_file" "$prs_no_cherrypick_file"
}

function main () {
    set -Eeo pipefail
    trap clean_up SIGABRT SIGQUIT SIGHUP SIGINT

    set_globals
    prepare_args "$@"

    printf '%s\n' "" "comparing between '${BASE_COMMIT}' and '${HEAD_COMMIT}'"

    get_commits_prs

    check_changelog "$prs_file"

    check_ce2ee "$prs_file"

    printf '%s\n' "" \
           "commits: $commits_file" \
           "pull requests: $prs_file" \
           "pull requests without changelog: $prs_no_changelog_file" \
           "pull requests without cherry-pick: $prs_no_cherrypick_file" \
           "" "Remeber to remove $out_dir"

    trap "" EXIT
}

if (( "$#" )) ; then main "$@" ; else show_help ; fi